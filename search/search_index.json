{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to TES\u2a53IoT Developer Guidelines","text":"The Enterprise AIoT Platform with Zero Trust Security"},{"location":"#quick-navigation","title":"\ud83d\ude80 Quick Navigation","text":"<ul> <li> <p> Getting Started</p> <p>Get up and running with TES\u2a53IoT in minutes</p> </li> <li> <p>:material-architecture: Architecture</p> <p>Understand the platform's design and components</p> </li> <li> <p> API Reference</p> <p>Complete API documentation and examples</p> </li> <li> <p> Development Standards</p> <p>Best practices and coding guidelines</p> </li> </ul>"},{"location":"#what-is-tesiot","title":"\ud83c\udfaf What is TES\u2a53IoT?","text":"<p>TES\u2a53IoT is an enterprise-grade AIoT platform that combines:</p> <ul> <li>\ud83d\udd12 Zero Trust Security - Certificate-based device authentication</li> <li>\ud83e\udd16 AI Integration - Natural language insights with Flowise</li> <li>\ud83d\udcca Real-time Analytics - Process millions of data points</li> <li>\ud83d\udd0c Extension Marketplace - Expand functionality with plugins</li> </ul>"},{"location":"#documentation-overview","title":"\ud83d\udcda Documentation Overview","text":"<p>Our documentation is organized into several key sections:</p>"},{"location":"#for-beginners","title":"For Beginners","text":"<ul> <li>Quick Start Guide - Deploy your first device in 5 minutes</li> <li>Core Concepts - Understand fundamental concepts</li> <li>First Project - Build your first IoT application</li> </ul>"},{"location":"#for-developers","title":"For Developers","text":"<ul> <li>API Guidelines - RESTful API design standards</li> <li>Development Standards - Code quality guidelines</li> <li>Tutorials - Step-by-step implementation guides</li> </ul>"},{"location":"#for-operations","title":"For Operations","text":"<ul> <li>Deployment Guide - Production deployment strategies</li> <li>Monitoring - System health and metrics</li> <li>Security - Security best practices</li> </ul>"},{"location":"#contributing","title":"\ud83e\udd1d Contributing","text":"<p>We welcome contributions! See our Contributing Guide for details.</p>"},{"location":"#resources","title":"\ud83d\udd17 Resources","text":"<ul> <li>GitHub Repository</li> <li>Community Forum</li> <li>API Status</li> </ul> <p>Made with \u2764\ufe0f by the TES\u2a53IoT Team</p> <p>Licensed under Apache 2.0</p>"},{"location":"license/","title":"License","text":""},{"location":"license/#documentation-license","title":"Documentation License","text":"<p>This documentation is licensed under the Creative Commons Attribution 4.0 International License.</p> <p>You are free to:</p> <ul> <li>Share \u2014 copy and redistribute the material in any medium or format</li> <li>Adapt \u2014 remix, transform, and build upon the material for any purpose, even commercially</li> </ul> <p>Under the following terms:</p> <ul> <li>Attribution \u2014 You must give appropriate credit, provide a link to the license, and indicate if changes were made.</li> </ul>"},{"location":"license/#platform-license","title":"Platform License","text":"<p>The TES\u2a53IoT Platform is dual-licensed:</p>"},{"location":"license/#community-edition","title":"Community Edition","text":"<ul> <li>Licensed under Apache License 2.0</li> <li>Free for commercial and non-commercial use</li> <li>Limited to basic features</li> </ul>"},{"location":"license/#enterprise-edition","title":"Enterprise Edition","text":"<ul> <li>Commercial license required</li> <li>Contact sales@tesaiot.com for pricing</li> <li>Includes advanced features and support</li> </ul>"},{"location":"license/#third-party-licenses","title":"Third-Party Licenses","text":"<p>This platform includes software from third parties. See THIRD_PARTY_LICENSES.md for details.</p>"},{"location":"api-reference/rest-api/","title":"REST API Reference","text":"<p>The TES\u2a53IoT Platform provides a comprehensive REST API for managing devices, organizations, users, and telemetry data.</p>"},{"location":"api-reference/rest-api/#base-url","title":"Base URL","text":"<pre><code>https://api.tesaiot.com/v1\n</code></pre> <p>For local development: <pre><code>http://localhost:5566/api/v1\n</code></pre></p>"},{"location":"api-reference/rest-api/#authentication","title":"Authentication","text":"<p>All API requests require authentication using Bearer tokens:</p> <pre><code>curl -H \"Authorization: Bearer YOUR_JWT_TOKEN\" \\\n     https://api.tesaiot.com/v1/devices\n</code></pre>"},{"location":"api-reference/rest-api/#obtaining-a-token","title":"Obtaining a Token","text":"<pre><code>POST /api/v1/auth/login\nContent-Type: application/json\n\n{\n  \"email\": \"user@example.com\",\n  \"password\": \"your-password\"\n}\n</code></pre> <p>Response: <pre><code>{\n  \"access_token\": \"eyJhbGciOiJIUzI1NiIs...\",\n  \"refresh_token\": \"eyJhbGciOiJIUzI1NiIs...\",\n  \"token_type\": \"Bearer\",\n  \"expires_in\": 3600\n}\n</code></pre></p>"},{"location":"api-reference/rest-api/#common-headers","title":"Common Headers","text":"Header Description Required <code>Authorization</code> Bearer token Yes <code>Content-Type</code> <code>application/json</code> For POST/PUT <code>X-Request-ID</code> Unique request identifier No <code>X-Organization-ID</code> Organization context Sometimes"},{"location":"api-reference/rest-api/#response-format","title":"Response Format","text":"<p>All responses follow a consistent format:</p>"},{"location":"api-reference/rest-api/#success-response","title":"Success Response","text":"<pre><code>{\n  \"success\": true,\n  \"data\": {\n    // Response data\n  },\n  \"meta\": {\n    \"timestamp\": \"2025-06-15T10:30:00Z\",\n    \"version\": \"1.0\"\n  }\n}\n</code></pre>"},{"location":"api-reference/rest-api/#error-response","title":"Error Response","text":"<pre><code>{\n  \"success\": false,\n  \"error\": {\n    \"code\": \"VALIDATION_ERROR\",\n    \"message\": \"Invalid input provided\",\n    \"details\": {\n      \"field\": \"email\",\n      \"reason\": \"Invalid email format\"\n    }\n  },\n  \"meta\": {\n    \"timestamp\": \"2025-06-15T10:30:00Z\",\n    \"request_id\": \"req_123456\"\n  }\n}\n</code></pre>"},{"location":"api-reference/rest-api/#endpoints","title":"Endpoints","text":""},{"location":"api-reference/rest-api/#authentication_1","title":"Authentication","text":""},{"location":"api-reference/rest-api/#login","title":"Login","text":"<pre><code>POST /api/v1/auth/login\n</code></pre> <p>Request: <pre><code>{\n  \"email\": \"user@example.com\",\n  \"password\": \"secure-password\"\n}\n</code></pre></p> <p>Response: <pre><code>{\n  \"access_token\": \"eyJ...\",\n  \"refresh_token\": \"eyJ...\",\n  \"user\": {\n    \"id\": \"usr_123\",\n    \"email\": \"user@example.com\",\n    \"name\": \"John Doe\",\n    \"roles\": [\"admin\"]\n  }\n}\n</code></pre></p>"},{"location":"api-reference/rest-api/#refresh-token","title":"Refresh Token","text":"<pre><code>POST /api/v1/auth/refresh\n</code></pre> <p>Request: <pre><code>{\n  \"refresh_token\": \"eyJ...\"\n}\n</code></pre></p>"},{"location":"api-reference/rest-api/#logout","title":"Logout","text":"<pre><code>POST /api/v1/auth/logout\n</code></pre>"},{"location":"api-reference/rest-api/#organizations","title":"Organizations","text":""},{"location":"api-reference/rest-api/#list-organizations","title":"List Organizations","text":"<pre><code>GET /api/v1/organizations\n</code></pre> <p>Query Parameters: - <code>page</code> (integer): Page number - <code>limit</code> (integer): Items per page - <code>search</code> (string): Search term - <code>parent_id</code> (string): Filter by parent</p> <p>Response: <pre><code>{\n  \"data\": [\n    {\n      \"id\": \"org_123\",\n      \"name\": \"Acme Corporation\",\n      \"type\": \"enterprise\",\n      \"parent_id\": null,\n      \"settings\": {\n        \"max_devices\": 1000,\n        \"features\": [\"ai\", \"analytics\"]\n      },\n      \"created_at\": \"2025-01-01T00:00:00Z\"\n    }\n  ],\n  \"pagination\": {\n    \"page\": 1,\n    \"limit\": 20,\n    \"total\": 45,\n    \"pages\": 3\n  }\n}\n</code></pre></p>"},{"location":"api-reference/rest-api/#get-organization-tree","title":"Get Organization Tree","text":"<pre><code>GET /api/v1/organizations/tree\n</code></pre> <p>Response: <pre><code>{\n  \"data\": {\n    \"id\": \"org_123\",\n    \"name\": \"Parent Org\",\n    \"children\": [\n      {\n        \"id\": \"org_456\",\n        \"name\": \"Child Org\",\n        \"children\": []\n      }\n    ]\n  }\n}\n</code></pre></p>"},{"location":"api-reference/rest-api/#create-organization","title":"Create Organization","text":"<pre><code>POST /api/v1/organizations\n</code></pre> <p>Request: <pre><code>{\n  \"name\": \"New Organization\",\n  \"type\": \"department\",\n  \"parent_id\": \"org_123\",\n  \"settings\": {\n    \"timezone\": \"UTC\",\n    \"language\": \"en\"\n  }\n}\n</code></pre></p>"},{"location":"api-reference/rest-api/#devices","title":"Devices","text":""},{"location":"api-reference/rest-api/#list-devices","title":"List Devices","text":"<pre><code>GET /api/v1/devices\n</code></pre> <p>Query Parameters: - <code>organization_id</code> (string): Filter by organization - <code>status</code> (string): active, inactive, maintenance - <code>type</code> (string): sensor, gateway, actuator - <code>tags</code> (array): Filter by tags</p> <p>Response: <pre><code>{\n  \"data\": [\n    {\n      \"id\": \"dev_789\",\n      \"name\": \"Temperature Sensor 01\",\n      \"type\": \"sensor\",\n      \"status\": \"active\",\n      \"organization_id\": \"org_123\",\n      \"metadata\": {\n        \"manufacturer\": \"Acme\",\n        \"model\": \"TS-100\",\n        \"firmware\": \"1.2.3\"\n      },\n      \"last_seen\": \"2025-06-15T10:00:00Z\",\n      \"created_at\": \"2025-01-01T00:00:00Z\"\n    }\n  ]\n}\n</code></pre></p>"},{"location":"api-reference/rest-api/#get-device-details","title":"Get Device Details","text":"<pre><code>GET /api/v1/devices/{device_id}\n</code></pre> <p>Response includes full device information plus: <pre><code>{\n  \"data\": {\n    \"id\": \"dev_789\",\n    \"name\": \"Temperature Sensor 01\",\n    \"certificates\": {\n      \"fingerprint\": \"SHA256:abcd1234...\",\n      \"expires_at\": \"2025-07-15T00:00:00Z\"\n    },\n    \"telemetry_summary\": {\n      \"last_value\": {\n        \"temperature\": 22.5,\n        \"humidity\": 45.2\n      },\n      \"message_count\": 15420\n    }\n  }\n}\n</code></pre></p>"},{"location":"api-reference/rest-api/#create-device","title":"Create Device","text":"<pre><code>POST /api/v1/devices\n</code></pre> <p>Request: <pre><code>{\n  \"name\": \"New Sensor\",\n  \"type\": \"sensor\",\n  \"organization_id\": \"org_123\",\n  \"metadata\": {\n    \"location\": \"Building A, Floor 2\",\n    \"manufacturer\": \"Acme\",\n    \"model\": \"TS-200\"\n  },\n  \"tags\": [\"temperature\", \"indoor\"]\n}\n</code></pre></p>"},{"location":"api-reference/rest-api/#generate-device-certificate","title":"Generate Device Certificate","text":"<pre><code>POST /api/v1/devices/{device_id}/certificates\n</code></pre> <p>Request: <pre><code>{\n  \"key_algorithm\": \"EC\",\n  \"key_size\": 256,\n  \"validity_days\": 30\n}\n</code></pre></p> <p>Response: <pre><code>{\n  \"certificate\": \"-----BEGIN CERTIFICATE-----\\n...\",\n  \"private_key\": \"-----BEGIN EC PRIVATE KEY-----\\n...\",\n  \"ca_certificate\": \"-----BEGIN CERTIFICATE-----\\n...\",\n  \"expires_at\": \"2025-07-15T00:00:00Z\"\n}\n</code></pre></p>"},{"location":"api-reference/rest-api/#telemetry","title":"Telemetry","text":""},{"location":"api-reference/rest-api/#get-device-telemetry","title":"Get Device Telemetry","text":"<pre><code>GET /api/v1/devices/{device_id}/telemetry\n</code></pre> <p>Query Parameters: - <code>start_time</code> (ISO 8601): Start of time range - <code>end_time</code> (ISO 8601): End of time range - <code>limit</code> (integer): Maximum records - <code>aggregation</code> (string): none, minute, hour, day</p> <p>Response: <pre><code>{\n  \"data\": [\n    {\n      \"timestamp\": \"2025-06-15T10:00:00Z\",\n      \"data\": {\n        \"temperature\": 22.5,\n        \"humidity\": 45.2,\n        \"pressure\": 1013.25\n      }\n    }\n  ],\n  \"meta\": {\n    \"device_id\": \"dev_789\",\n    \"count\": 100,\n    \"aggregation\": \"none\"\n  }\n}\n</code></pre></p>"},{"location":"api-reference/rest-api/#send-telemetry-mqtt-bridge","title":"Send Telemetry (MQTT Bridge)","text":"<pre><code>POST /api/v1/devices/{device_id}/telemetry/ingest\n</code></pre> <p>Request: <pre><code>{\n  \"timestamp\": \"2025-06-15T10:00:00Z\",\n  \"data\": {\n    \"temperature\": 22.5,\n    \"humidity\": 45.2\n  }\n}\n</code></pre></p>"},{"location":"api-reference/rest-api/#commands","title":"Commands","text":""},{"location":"api-reference/rest-api/#send-command-to-device","title":"Send Command to Device","text":"<pre><code>POST /api/v1/devices/{device_id}/commands\n</code></pre> <p>Request: <pre><code>{\n  \"command\": \"restart\",\n  \"parameters\": {\n    \"delay\": 5000\n  },\n  \"timeout\": 30000\n}\n</code></pre></p> <p>Response: <pre><code>{\n  \"command_id\": \"cmd_123\",\n  \"status\": \"pending\",\n  \"created_at\": \"2025-06-15T10:00:00Z\"\n}\n</code></pre></p>"},{"location":"api-reference/rest-api/#get-command-status","title":"Get Command Status","text":"<pre><code>GET /api/v1/commands/{command_id}\n</code></pre>"},{"location":"api-reference/rest-api/#analytics","title":"Analytics","text":""},{"location":"api-reference/rest-api/#device-statistics","title":"Device Statistics","text":"<pre><code>GET /api/v1/devices/{device_id}/stats\n</code></pre> <p>Query Parameters: - <code>period</code> (string): hour, day, week, month - <code>metrics</code> (array): Specific metrics to include</p> <p>Response: <pre><code>{\n  \"data\": {\n    \"period\": \"day\",\n    \"metrics\": {\n      \"message_count\": 1440,\n      \"average_values\": {\n        \"temperature\": 22.3,\n        \"humidity\": 46.8\n      },\n      \"uptime_percentage\": 99.9\n    }\n  }\n}\n</code></pre></p>"},{"location":"api-reference/rest-api/#rate-limiting","title":"Rate Limiting","text":"<p>API rate limits are enforced per endpoint:</p> Endpoint Rate Limit Authentication 5 requests/minute Device List 100 requests/minute Telemetry Ingestion 1000 requests/minute Others 60 requests/minute <p>Rate limit headers: <pre><code>X-RateLimit-Limit: 100\nX-RateLimit-Remaining: 95\nX-RateLimit-Reset: 1623456789\n</code></pre></p>"},{"location":"api-reference/rest-api/#error-codes","title":"Error Codes","text":"Code Description <code>UNAUTHORIZED</code> Invalid or missing authentication <code>FORBIDDEN</code> Insufficient permissions <code>NOT_FOUND</code> Resource not found <code>VALIDATION_ERROR</code> Invalid input data <code>RATE_LIMITED</code> Too many requests <code>INTERNAL_ERROR</code> Server error"},{"location":"api-reference/rest-api/#pagination","title":"Pagination","text":"<p>List endpoints support pagination:</p> <pre><code>GET /api/v1/devices?page=2&amp;limit=50\n</code></pre> <p>Response includes pagination metadata: <pre><code>{\n  \"pagination\": {\n    \"page\": 2,\n    \"limit\": 50,\n    \"total\": 245,\n    \"pages\": 5,\n    \"has_next\": true,\n    \"has_prev\": true\n  }\n}\n</code></pre></p>"},{"location":"api-reference/rest-api/#filtering-and-sorting","title":"Filtering and Sorting","text":"<p>Most list endpoints support filtering and sorting:</p> <pre><code>GET /api/v1/devices?status=active&amp;sort=-created_at&amp;tags=temperature,outdoor\n</code></pre> <ul> <li>Use <code>-</code> prefix for descending sort</li> <li>Multiple values separated by commas</li> <li>Nested fields use dot notation: <code>metadata.location</code></li> </ul>"},{"location":"api-reference/rest-api/#webhooks","title":"Webhooks","text":"<p>Configure webhooks for real-time events:</p> <pre><code>POST /api/v1/webhooks\n</code></pre> <p>Request: <pre><code>{\n  \"url\": \"https://your-app.com/webhook\",\n  \"events\": [\"device.connected\", \"device.disconnected\"],\n  \"secret\": \"webhook-secret\"\n}\n</code></pre></p>"},{"location":"api-reference/rest-api/#sdk-examples","title":"SDK Examples","text":""},{"location":"api-reference/rest-api/#python","title":"Python","text":"<pre><code>from tesaiot import Client\n\nclient = Client(\n    base_url=\"https://api.tesaiot.com\",\n    api_key=\"your-api-key\"\n)\n\n# List devices\ndevices = client.devices.list(organization_id=\"org_123\")\n\n# Get telemetry\ntelemetry = client.devices.get_telemetry(\n    device_id=\"dev_789\",\n    start_time=\"2025-06-15T00:00:00Z\"\n)\n</code></pre>"},{"location":"api-reference/rest-api/#javascripttypescript","title":"JavaScript/TypeScript","text":"<pre><code>import { TesaIoTClient } from '@tesaiot/sdk';\n\nconst client = new TesaIoTClient({\n  baseUrl: 'https://api.tesaiot.com',\n  apiKey: 'your-api-key'\n});\n\n// List devices\nconst devices = await client.devices.list({\n  organizationId: 'org_123'\n});\n\n// Send command\nconst result = await client.devices.sendCommand('dev_789', {\n  command: 'restart',\n  parameters: { delay: 5000 }\n});\n</code></pre>"},{"location":"api-reference/rest-api/#api-versioning","title":"API Versioning","text":"<p>The API uses URL versioning: - Current version: <code>v1</code> - Version in URL: <code>/api/v1/...</code> - Deprecation notice: 6 months - Sunset period: 12 months</p>"},{"location":"api-reference/rest-api/#support","title":"Support","text":"<ul> <li>API Status: https://status.tesaiot.com</li> <li>Documentation: https://docs.tesaiot.com</li> <li>Support: support@tesaiot.com</li> </ul>"},{"location":"architecture/","title":"Platform Architecture","text":"<p>Understanding TES\u2a53IoT's architecture is key to leveraging its full potential.</p>"},{"location":"architecture/#architecture-components","title":"Architecture Components","text":"<ul> <li>Overview - High-level system architecture</li> <li>Core Concepts - Fundamental concepts and terminology</li> <li>System Design - Design principles and patterns</li> <li>Data Flow - How data moves through the system</li> <li>Security Model - Zero Trust security architecture</li> <li>Scalability - Scaling strategies and patterns</li> </ul>"},{"location":"architecture/#key-design-principles","title":"Key Design Principles","text":"<ol> <li>Security First - Zero Trust architecture with PKI</li> <li>Scalability - Handle millions of devices</li> <li>Extensibility - Plugin architecture for customization</li> <li>Reliability - 99.99% uptime SLA</li> <li>Performance - Sub-5ms API response times</li> </ol>"},{"location":"architecture/security-model/","title":"Security Architecture","text":"<p>TES\u2a53IoT implements a comprehensive Zero Trust security model that ensures every component and connection is authenticated, authorized, and encrypted.</p>"},{"location":"architecture/security-model/#overview","title":"Overview","text":"<p>Our security architecture is built on these principles:</p> <ol> <li>Never Trust, Always Verify - Every request is authenticated</li> <li>Least Privilege Access - Minimal permissions by default</li> <li>Defense in Depth - Multiple security layers</li> <li>End-to-End Encryption - All data encrypted in transit and at rest</li> <li>Audit Everything - Comprehensive logging and monitoring</li> </ol>"},{"location":"architecture/security-model/#core-components","title":"Core Components","text":""},{"location":"architecture/security-model/#1-hashicorp-vault-certificate-authority","title":"1. HashiCorp Vault (Certificate Authority)","text":"<p>Vault serves as our central PKI and secrets management system:</p> <pre><code>graph TB\n    subgraph \"Vault PKI\"\n        Root[Root CA]\n        Intermediate[Intermediate CA]\n        DeviceCerts[Device Certificates]\n        ServiceCerts[Service Certificates]\n\n        Root --&gt; Intermediate\n        Intermediate --&gt; DeviceCerts\n        Intermediate --&gt; ServiceCerts\n    end\n\n    subgraph \"Services\"\n        API[API Server]\n        MQTT[VerneMQ]\n        DB[MongoDB]\n\n        ServiceCerts --&gt; API\n        ServiceCerts --&gt; MQTT\n        ServiceCerts --&gt; DB\n    end\n\n    subgraph \"Devices\"\n        Device1[IoT Device 1]\n        Device2[IoT Device 2]\n\n        DeviceCerts --&gt; Device1\n        DeviceCerts --&gt; Device2\n    end</code></pre> <p>Key Features: - Automatic certificate rotation - Short-lived certificates (24-hour default) - Certificate revocation lists (CRL) - Hardware security module (HSM) support</p>"},{"location":"architecture/security-model/#2-device-authentication","title":"2. Device Authentication","text":"<p>Every device must authenticate using X.509 certificates:</p> <pre><code># Device certificate requirements\nCertificate:\n  Subject:\n    CN: device-uuid          # Unique device identifier\n    O: organization-id       # Organization ownership\n    OU: device-type         # Device classification\n  Extensions:\n    KeyUsage:\n      - digitalSignature\n      - keyAgreement\n    ExtendedKeyUsage:\n      - clientAuth\n  Validity: \n    Days: 30                # Short-lived for security\n</code></pre> <p>Authentication Flow: 1. Device presents certificate during TLS handshake 2. VerneMQ validates certificate against Vault CA 3. Webhook validates device status in database 4. Connection approved or rejected 5. All attempts logged for audit</p>"},{"location":"architecture/security-model/#3-api-security","title":"3. API Security","text":"<p>REST API implements multiple security layers:</p>"},{"location":"architecture/security-model/#jwt-token-authentication","title":"JWT Token Authentication","text":"<pre><code># Token structure\n{\n  \"sub\": \"user-uuid\",\n  \"org\": \"organization-uuid\",\n  \"roles\": [\"admin\", \"operator\"],\n  \"exp\": 1234567890,\n  \"iat\": 1234567890,\n  \"iss\": \"tesaiot-platform\",\n  \"aud\": \"api.tesaiot.com\"\n}\n</code></pre>"},{"location":"architecture/security-model/#rate-limiting","title":"Rate Limiting","text":"<pre><code>RateLimits:\n  Anonymous: 10/minute\n  Authenticated: 100/minute\n  Premium: 1000/minute\n  PerEndpoint:\n    /api/v1/auth/login: 5/minute\n    /api/v1/devices/*/telemetry: 1000/minute\n</code></pre>"},{"location":"architecture/security-model/#cors-configuration","title":"CORS Configuration","text":"<pre><code>CORS: {\n  origins: [\"https://app.tesaiot.com\"],\n  methods: [\"GET\", \"POST\", \"PUT\", \"DELETE\"],\n  credentials: true,\n  maxAge: 86400\n}\n</code></pre>"},{"location":"architecture/security-model/#4-data-encryption","title":"4. Data Encryption","text":""},{"location":"architecture/security-model/#in-transit","title":"In Transit","text":"<ul> <li>TLS 1.3 minimum for all connections</li> <li>Perfect Forward Secrecy (PFS)</li> <li>Strong cipher suites only:   <pre><code>TLS_AES_256_GCM_SHA384\nTLS_CHACHA20_POLY1305_SHA256\nTLS_AES_128_GCM_SHA256\n</code></pre></li> </ul>"},{"location":"architecture/security-model/#at-rest","title":"At Rest","text":"<ul> <li>MongoDB: Encrypted storage engine</li> <li>TimescaleDB: Transparent data encryption</li> <li>File storage: AES-256-GCM</li> <li>Backups: Additional encryption layer</li> </ul>"},{"location":"architecture/security-model/#5-network-security","title":"5. Network Security","text":""},{"location":"architecture/security-model/#zero-trust-network-architecture","title":"Zero Trust Network Architecture","text":"<pre><code>Networks:\n  DMZ:\n    - NGINX (Public facing)\n    - APISIX Gateway\n\n  Application:\n    - API Servers\n    - VerneMQ Cluster\n    - Flowise AI\n\n  Data:\n    - MongoDB Cluster\n    - TimescaleDB\n    - Redis Cache\n\n  Management:\n    - Vault\n    - Monitoring\n    - Logging\n</code></pre>"},{"location":"architecture/security-model/#firewall-rules","title":"Firewall Rules","text":"<pre><code># Ingress rules (examples)\n- Allow 443/tcp from 0.0.0.0/0 to DMZ        # HTTPS\n- Allow 8883/tcp from 0.0.0.0/0 to DMZ       # MQTTS\n- Allow 5566/tcp from 10.0.0.0/8 to App      # Internal API\n- Deny all else\n\n# Egress rules\n- Allow established connections\n- Allow DNS (53/udp)\n- Allow NTP (123/udp)\n- Deny all else\n</code></pre>"},{"location":"architecture/security-model/#security-policies","title":"Security Policies","text":""},{"location":"architecture/security-model/#1-password-policy","title":"1. Password Policy","text":"<pre><code>PasswordPolicy:\n  MinLength: 12\n  RequireUppercase: true\n  RequireLowercase: true\n  RequireNumbers: true\n  RequireSpecialChars: true\n  MaxAge: 90 days\n  History: 5\n  MaxAttempts: 5\n  LockoutDuration: 30 minutes\n</code></pre>"},{"location":"architecture/security-model/#2-session-management","title":"2. Session Management","text":"<pre><code>SessionPolicy:\n  Timeout: 30 minutes\n  AbsoluteTimeout: 8 hours\n  ConcurrentSessions: 3\n  SecureFlags:\n    - HttpOnly\n    - Secure\n    - SameSite=Strict\n</code></pre>"},{"location":"architecture/security-model/#3-api-token-policy","title":"3. API Token Policy","text":"<pre><code>APITokenPolicy:\n  Types:\n    Personal: \n      MaxAge: 90 days\n      Scope: user permissions\n    Service:\n      MaxAge: 365 days\n      Scope: specific services\n    Temporary:\n      MaxAge: 1 hour\n      Scope: limited operations\n</code></pre>"},{"location":"architecture/security-model/#compliance","title":"Compliance","text":""},{"location":"architecture/security-model/#standards-compliance","title":"Standards Compliance","text":"<ul> <li>NIST CSF 2.0 - Cybersecurity Framework</li> <li>ISO 27001 - Information Security Management</li> <li>ISO 27017 - Cloud Security</li> <li>ISO 27018 - PII Protection</li> <li>IEC 62443 - Industrial Security</li> </ul>"},{"location":"architecture/security-model/#security-controls","title":"Security Controls","text":"<pre><code>Controls:\n  Access Control:\n    - AC-2: Account Management\n    - AC-3: Access Enforcement\n    - AC-6: Least Privilege\n\n  Audit and Accountability:\n    - AU-2: Audit Events\n    - AU-3: Content of Audit Records\n    - AU-4: Audit Storage Capacity\n\n  System and Communications:\n    - SC-8: Transmission Confidentiality\n    - SC-13: Cryptographic Protection\n    - SC-23: Session Authenticity\n</code></pre>"},{"location":"architecture/security-model/#security-operations","title":"Security Operations","text":""},{"location":"architecture/security-model/#1-monitoring-and-detection","title":"1. Monitoring and Detection","text":"<pre><code>SecurityMonitoring:\n  SIEM: \n    - Failed authentication attempts\n    - Privilege escalation\n    - Unusual API patterns\n    - Certificate anomalies\n\n  Alerts:\n    Critical:\n      - Multiple failed logins\n      - Unauthorized access attempts\n      - Certificate validation failures\n\n    Warning:\n      - Unusual traffic patterns\n      - Expired certificates\n      - High error rates\n</code></pre>"},{"location":"architecture/security-model/#2-incident-response","title":"2. Incident Response","text":"<pre><code>IncidentResponse:\n  Phases:\n    1. Detection: Automated monitoring\n    2. Analysis: Security team review\n    3. Containment: Isolate affected systems\n    4. Eradication: Remove threat\n    5. Recovery: Restore operations\n    6. Lessons Learned: Update procedures\n\n  SLA:\n    Critical: 15 minutes\n    High: 1 hour\n    Medium: 4 hours\n    Low: 24 hours\n</code></pre>"},{"location":"architecture/security-model/#3-security-auditing","title":"3. Security Auditing","text":"<pre><code>-- Audit log schema\nCREATE TABLE security_audit (\n    id UUID PRIMARY KEY,\n    timestamp TIMESTAMPTZ NOT NULL,\n    user_id UUID,\n    action VARCHAR(255) NOT NULL,\n    resource VARCHAR(255),\n    result VARCHAR(50),\n    ip_address INET,\n    user_agent TEXT,\n    details JSONB\n);\n\n-- Indexes for efficient querying\nCREATE INDEX idx_audit_timestamp ON security_audit(timestamp);\nCREATE INDEX idx_audit_user ON security_audit(user_id);\nCREATE INDEX idx_audit_action ON security_audit(action);\n</code></pre>"},{"location":"architecture/security-model/#best-practices","title":"Best Practices","text":""},{"location":"architecture/security-model/#for-administrators","title":"For Administrators","text":"<ol> <li>Regular Security Reviews</li> <li>Monthly certificate audit</li> <li>Quarterly access review</li> <li> <p>Annual penetration testing</p> </li> <li> <p>Patch Management</p> </li> <li>Critical patches: 24 hours</li> <li>Security patches: 7 days</li> <li> <p>Regular updates: Monthly</p> </li> <li> <p>Backup Security</p> </li> <li>Encrypted backups</li> <li>Offsite storage</li> <li>Regular restore testing</li> </ol>"},{"location":"architecture/security-model/#for-developers","title":"For Developers","text":"<ol> <li> <p>Secure Coding <pre><code># Input validation example\ndef validate_device_id(device_id: str) -&gt; bool:\n    \"\"\"Validate device ID format and existence\"\"\"\n    if not re.match(r'^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$', device_id):\n        raise ValueError(\"Invalid device ID format\")\n\n    if not device_exists(device_id):\n        raise ValueError(\"Device not found\")\n\n    return True\n</code></pre></p> </li> <li> <p>Secret Management <pre><code># Never hardcode secrets\n# Bad\nAPI_KEY = \"sk-1234567890abcdef\"\n\n# Good\nAPI_KEY = os.environ.get('API_KEY')\n# Better\nAPI_KEY = vault_client.read_secret('api/keys/service')\n</code></pre></p> </li> <li> <p>Error Handling <pre><code># Don't expose internal details\n# Bad\nexcept Exception as e:\n    return {\"error\": str(e), \"stack\": traceback.format_exc()}\n\n# Good\nexcept ValidationError:\n    return {\"error\": \"Invalid input provided\"}, 400\nexcept Exception:\n    logger.exception(\"Unexpected error\")\n    return {\"error\": \"Internal server error\"}, 500\n</code></pre></p> </li> </ol>"},{"location":"architecture/security-model/#security-roadmap","title":"Security Roadmap","text":""},{"location":"architecture/security-model/#current-v202506","title":"Current (v2025.06)","text":"<ul> <li>\u2705 Zero Trust MQTT with X.509</li> <li>\u2705 Vault PKI integration</li> <li>\u2705 Basic RBAC</li> <li>\u2705 TLS everywhere</li> </ul>"},{"location":"architecture/security-model/#next-v202507","title":"Next (v2025.07)","text":"<ul> <li> AI security governance</li> <li> Advanced threat detection</li> <li> Automated security scanning</li> <li> Enhanced audit capabilities</li> </ul>"},{"location":"architecture/security-model/#future-v202509","title":"Future (v2025.09+)","text":"<ul> <li> Hardware security module (HSM)</li> <li> Quantum-resistant cryptography</li> <li> Behavioral analytics</li> <li> Zero-knowledge proofs</li> </ul>"},{"location":"architecture/security-model/#resources","title":"Resources","text":"<ul> <li>NIST Cybersecurity Framework</li> <li>OWASP IoT Security</li> <li>Vault Documentation</li> <li>TLS Best Practices</li> </ul>"},{"location":"development-standards/languages/python/","title":"Python Development Standards","text":"<p>This guide outlines the Python development standards for the TES\u2a53IoT Platform.</p>"},{"location":"development-standards/languages/python/#python-version","title":"Python Version","text":"<ul> <li>Required: Python 3.9+</li> <li>Recommended: Python 3.11 (current stable)</li> <li>Framework: FastAPI for APIs, Celery for async tasks</li> </ul>"},{"location":"development-standards/languages/python/#code-style","title":"Code Style","text":""},{"location":"development-standards/languages/python/#pep-8-compliance","title":"PEP 8 Compliance","text":"<p>Follow PEP 8 with these specific guidelines:</p> <pre><code># Good: Clear imports grouped by type\nimport os\nimport sys\nfrom datetime import datetime\nfrom typing import Optional, List, Dict\n\nimport pydantic\nfrom fastapi import FastAPI, HTTPException\nfrom sqlalchemy import create_engine\n\nfrom app.core.config import settings\nfrom app.models.device import Device\n</code></pre>"},{"location":"development-standards/languages/python/#naming-conventions","title":"Naming Conventions","text":"<pre><code># Classes: PascalCase\nclass DeviceManager:\n    pass\n\n# Functions/Variables: snake_case\ndef get_device_by_id(device_id: str) -&gt; Device:\n    device_name = \"sensor_001\"\n    return device\n\n# Constants: UPPER_SNAKE_CASE\nMAX_RETRY_ATTEMPTS = 3\nDEFAULT_TIMEOUT = 30\n\n# Private: Leading underscore\ndef _internal_helper():\n    pass\n</code></pre>"},{"location":"development-standards/languages/python/#type-hints","title":"Type Hints","text":"<p>Always use type hints for better code clarity:</p> <pre><code>from typing import Optional, List, Dict, Union, Tuple\nfrom datetime import datetime\n\ndef process_telemetry(\n    device_id: str,\n    data: Dict[str, float],\n    timestamp: Optional[datetime] = None\n) -&gt; Tuple[bool, Optional[str]]:\n    \"\"\"\n    Process telemetry data from a device.\n\n    Args:\n        device_id: Unique device identifier\n        data: Telemetry data as key-value pairs\n        timestamp: Optional timestamp, defaults to now\n\n    Returns:\n        Tuple of (success, error_message)\n    \"\"\"\n    if not timestamp:\n        timestamp = datetime.utcnow()\n\n    try:\n        # Process data\n        return True, None\n    except Exception as e:\n        return False, str(e)\n</code></pre>"},{"location":"development-standards/languages/python/#project-structure","title":"Project Structure","text":"<pre><code>src/\n\u251c\u2500\u2500 api/\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 main.py              # FastAPI app\n\u2502   \u251c\u2500\u2500 dependencies.py      # Dependency injection\n\u2502   \u251c\u2500\u2500 middleware.py        # Custom middleware\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 controllers/         # API endpoints\n\u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502   \u251c\u2500\u2500 auth.py\n\u2502   \u2502   \u251c\u2500\u2500 devices.py\n\u2502   \u2502   \u2514\u2500\u2500 telemetry.py\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 models/             # Pydantic models\n\u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502   \u251c\u2500\u2500 device.py\n\u2502   \u2502   \u2514\u2500\u2500 user.py\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 services/           # Business logic\n\u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502   \u251c\u2500\u2500 device_service.py\n\u2502   \u2502   \u2514\u2500\u2500 auth_service.py\n\u2502   \u2502\n\u2502   \u2514\u2500\u2500 core/              # Core functionality\n\u2502       \u251c\u2500\u2500 __init__.py\n\u2502       \u251c\u2500\u2500 config.py      # Settings\n\u2502       \u251c\u2500\u2500 security.py    # Auth/Security\n\u2502       \u2514\u2500\u2500 database.py    # DB connection\n\u2502\n\u251c\u2500\u2500 tasks/                 # Celery tasks\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2514\u2500\u2500 telemetry.py\n\u2502\n\u251c\u2500\u2500 tests/                 # Test files\n\u2502   \u251c\u2500\u2500 unit/\n\u2502   \u251c\u2500\u2500 integration/\n\u2502   \u2514\u2500\u2500 conftest.py\n\u2502\n\u251c\u2500\u2500 alembic/              # Database migrations\n\u251c\u2500\u2500 scripts/              # Utility scripts\n\u2514\u2500\u2500 requirements/         # Dependencies\n    \u251c\u2500\u2500 base.txt\n    \u251c\u2500\u2500 dev.txt\n    \u2514\u2500\u2500 prod.txt\n</code></pre>"},{"location":"development-standards/languages/python/#fastapi-best-practices","title":"FastAPI Best Practices","text":""},{"location":"development-standards/languages/python/#api-structure","title":"API Structure","text":"<pre><code>from fastapi import FastAPI, Depends, HTTPException, status\nfrom fastapi.security import HTTPBearer, HTTPAuthorizationCredentials\nfrom typing import List\n\nfrom app.models.device import Device, DeviceCreate, DeviceUpdate\nfrom app.services.device_service import DeviceService\nfrom app.core.deps import get_current_user, get_db\n\napp = FastAPI(\n    title=\"TES\u2a53IoT API\",\n    version=\"1.0.0\",\n    docs_url=\"/api/docs\",\n    redoc_url=\"/api/redoc\"\n)\n\nsecurity = HTTPBearer()\n\n@app.get(\"/api/v1/devices\", response_model=List[Device])\nasync def list_devices(\n    skip: int = 0,\n    limit: int = 100,\n    organization_id: Optional[str] = None,\n    current_user: User = Depends(get_current_user),\n    db: Session = Depends(get_db)\n):\n    \"\"\"\n    List all devices accessible to the current user.\n\n    - **skip**: Number of records to skip\n    - **limit**: Maximum number of records to return\n    - **organization_id**: Filter by organization\n    \"\"\"\n    service = DeviceService(db)\n    return service.list_devices(\n        user=current_user,\n        skip=skip,\n        limit=limit,\n        organization_id=organization_id\n    )\n\n@app.post(\"/api/v1/devices\", response_model=Device, status_code=status.HTTP_201_CREATED)\nasync def create_device(\n    device: DeviceCreate,\n    current_user: User = Depends(get_current_user),\n    db: Session = Depends(get_db)\n):\n    \"\"\"Create a new device.\"\"\"\n    service = DeviceService(db)\n    return service.create_device(device, current_user)\n</code></pre>"},{"location":"development-standards/languages/python/#dependency-injection","title":"Dependency Injection","text":"<pre><code># app/core/deps.py\nfrom fastapi import Depends, HTTPException, status\nfrom fastapi.security import HTTPBearer, HTTPAuthorizationCredentials\nfrom sqlalchemy.orm import Session\n\nfrom app.core.database import SessionLocal\nfrom app.core.security import verify_token\nfrom app.models.user import User\n\nsecurity = HTTPBearer()\n\ndef get_db():\n    \"\"\"Database session dependency.\"\"\"\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n\nasync def get_current_user(\n    credentials: HTTPAuthorizationCredentials = Depends(security),\n    db: Session = Depends(get_db)\n) -&gt; User:\n    \"\"\"Get current authenticated user.\"\"\"\n    token = credentials.credentials\n\n    user_id = verify_token(token)\n    if not user_id:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n\n    user = db.query(User).filter(User.id == user_id).first()\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=\"User not found\"\n        )\n\n    return user\n</code></pre>"},{"location":"development-standards/languages/python/#error-handling","title":"Error Handling","text":""},{"location":"development-standards/languages/python/#custom-exceptions","title":"Custom Exceptions","text":"<pre><code># app/core/exceptions.py\nclass TesaIoTException(Exception):\n    \"\"\"Base exception for TES\u2a53IoT Platform.\"\"\"\n    pass\n\nclass DeviceNotFoundException(TesaIoTException):\n    \"\"\"Device not found in database.\"\"\"\n    pass\n\nclass InsufficientPermissionsException(TesaIoTException):\n    \"\"\"User lacks required permissions.\"\"\"\n    pass\n\nclass ValidationException(TesaIoTException):\n    \"\"\"Input validation failed.\"\"\"\n    def __init__(self, field: str, reason: str):\n        self.field = field\n        self.reason = reason\n        super().__init__(f\"Validation failed for {field}: {reason}\")\n</code></pre>"},{"location":"development-standards/languages/python/#exception-handlers","title":"Exception Handlers","text":"<pre><code># app/main.py\nfrom fastapi import Request\nfrom fastapi.responses import JSONResponse\n\n@app.exception_handler(DeviceNotFoundException)\nasync def device_not_found_handler(request: Request, exc: DeviceNotFoundException):\n    return JSONResponse(\n        status_code=404,\n        content={\n            \"success\": False,\n            \"error\": {\n                \"code\": \"DEVICE_NOT_FOUND\",\n                \"message\": str(exc)\n            }\n        }\n    )\n\n@app.exception_handler(ValidationException)\nasync def validation_exception_handler(request: Request, exc: ValidationException):\n    return JSONResponse(\n        status_code=400,\n        content={\n            \"success\": False,\n            \"error\": {\n                \"code\": \"VALIDATION_ERROR\",\n                \"message\": str(exc),\n                \"details\": {\n                    \"field\": exc.field,\n                    \"reason\": exc.reason\n                }\n            }\n        }\n    )\n</code></pre>"},{"location":"development-standards/languages/python/#database-access","title":"Database Access","text":""},{"location":"development-standards/languages/python/#sqlalchemy-models","title":"SQLAlchemy Models","text":"<pre><code># app/models/db/device.py\nfrom sqlalchemy import Column, String, DateTime, Boolean, JSON\nfrom sqlalchemy.dialects.postgresql import UUID\nfrom sqlalchemy.sql import func\n\nfrom app.core.database import Base\n\nclass DeviceDB(Base):\n    __tablename__ = \"devices\"\n\n    id = Column(UUID(as_uuid=True), primary_key=True)\n    name = Column(String(255), nullable=False)\n    type = Column(String(50), nullable=False)\n    status = Column(String(20), default=\"active\")\n    organization_id = Column(UUID(as_uuid=True), nullable=False)\n    metadata = Column(JSON, default={})\n\n    created_at = Column(DateTime(timezone=True), server_default=func.now())\n    updated_at = Column(DateTime(timezone=True), onupdate=func.now())\n\n    # Relationships\n    telemetry = relationship(\"TelemetryDB\", back_populates=\"device\")\n</code></pre>"},{"location":"development-standards/languages/python/#repository-pattern","title":"Repository Pattern","text":"<pre><code># app/repositories/device_repository.py\nfrom typing import Optional, List\nfrom sqlalchemy.orm import Session\nfrom sqlalchemy import and_, or_\n\nfrom app.models.db.device import DeviceDB\n\nclass DeviceRepository:\n    def __init__(self, db: Session):\n        self.db = db\n\n    def get_by_id(self, device_id: str) -&gt; Optional[DeviceDB]:\n        \"\"\"Get device by ID.\"\"\"\n        return self.db.query(DeviceDB).filter(\n            DeviceDB.id == device_id\n        ).first()\n\n    def list_by_organization(\n        self, \n        organization_id: str,\n        skip: int = 0,\n        limit: int = 100\n    ) -&gt; List[DeviceDB]:\n        \"\"\"List devices for an organization.\"\"\"\n        return self.db.query(DeviceDB).filter(\n            DeviceDB.organization_id == organization_id\n        ).offset(skip).limit(limit).all()\n\n    def create(self, device_data: dict) -&gt; DeviceDB:\n        \"\"\"Create new device.\"\"\"\n        device = DeviceDB(**device_data)\n        self.db.add(device)\n        self.db.commit()\n        self.db.refresh(device)\n        return device\n</code></pre>"},{"location":"development-standards/languages/python/#testing","title":"Testing","text":""},{"location":"development-standards/languages/python/#unit-tests","title":"Unit Tests","text":"<pre><code># tests/unit/test_device_service.py\nimport pytest\nfrom unittest.mock import Mock, patch\nfrom datetime import datetime\n\nfrom app.services.device_service import DeviceService\nfrom app.models.device import DeviceCreate\n\n@pytest.fixture\ndef mock_db():\n    \"\"\"Mock database session.\"\"\"\n    return Mock()\n\n@pytest.fixture\ndef device_service(mock_db):\n    \"\"\"Device service instance.\"\"\"\n    return DeviceService(mock_db)\n\ndef test_create_device_success(device_service, mock_db):\n    \"\"\"Test successful device creation.\"\"\"\n    # Arrange\n    device_data = DeviceCreate(\n        name=\"Test Device\",\n        type=\"sensor\",\n        organization_id=\"org_123\"\n    )\n\n    expected_device = Mock(\n        id=\"dev_123\",\n        name=\"Test Device\",\n        type=\"sensor\"\n    )\n\n    mock_db.add.return_value = None\n    mock_db.commit.return_value = None\n    mock_db.refresh.return_value = None\n\n    # Act\n    with patch('app.services.device_service.DeviceDB', return_value=expected_device):\n        result = device_service.create_device(device_data, Mock())\n\n    # Assert\n    assert result.id == \"dev_123\"\n    assert result.name == \"Test Device\"\n    mock_db.add.assert_called_once()\n    mock_db.commit.assert_called_once()\n</code></pre>"},{"location":"development-standards/languages/python/#integration-tests","title":"Integration Tests","text":"<pre><code># tests/integration/test_api_devices.py\nimport pytest\nfrom fastapi.testclient import TestClient\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.orm import sessionmaker\n\nfrom app.main import app\nfrom app.core.database import Base, get_db\n\n# Test database\nSQLALCHEMY_DATABASE_URL = \"sqlite:///./test.db\"\nengine = create_engine(SQLALCHEMY_DATABASE_URL)\nTestingSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\n\nBase.metadata.create_all(bind=engine)\n\ndef override_get_db():\n    try:\n        db = TestingSessionLocal()\n        yield db\n    finally:\n        db.close()\n\napp.dependency_overrides[get_db] = override_get_db\nclient = TestClient(app)\n\ndef test_list_devices_authenticated():\n    \"\"\"Test listing devices with authentication.\"\"\"\n    # Create test token\n    token = create_test_token(user_id=\"user_123\")\n\n    response = client.get(\n        \"/api/v1/devices\",\n        headers={\"Authorization\": f\"Bearer {token}\"}\n    )\n\n    assert response.status_code == 200\n    assert response.json()[\"success\"] is True\n</code></pre>"},{"location":"development-standards/languages/python/#security-best-practices","title":"Security Best Practices","text":""},{"location":"development-standards/languages/python/#input-validation","title":"Input Validation","text":"<pre><code># app/models/device.py\nfrom pydantic import BaseModel, Field, validator\nimport re\n\nclass DeviceCreate(BaseModel):\n    name: str = Field(..., min_length=1, max_length=255)\n    type: str = Field(..., regex=\"^(sensor|gateway|actuator)$\")\n    organization_id: str\n    metadata: Optional[Dict[str, Any]] = Field(default_factory=dict)\n\n    @validator('name')\n    def validate_name(cls, v):\n        \"\"\"Validate device name format.\"\"\"\n        if not re.match(r'^[a-zA-Z0-9_\\-\\s]+$', v):\n            raise ValueError('Name contains invalid characters')\n        return v\n\n    @validator('metadata')\n    def validate_metadata(cls, v):\n        \"\"\"Validate metadata size.\"\"\"\n        if len(str(v)) &gt; 10000:  # 10KB limit\n            raise ValueError('Metadata too large')\n        return v\n</code></pre>"},{"location":"development-standards/languages/python/#secure-coding","title":"Secure Coding","text":"<pre><code># app/core/security.py\nimport secrets\nfrom passlib.context import CryptContext\nfrom jose import JWTError, jwt\nfrom datetime import datetime, timedelta\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\ndef hash_password(password: str) -&gt; str:\n    \"\"\"Hash password using bcrypt.\"\"\"\n    return pwd_context.hash(password)\n\ndef verify_password(plain_password: str, hashed_password: str) -&gt; bool:\n    \"\"\"Verify password against hash.\"\"\"\n    return pwd_context.verify(plain_password, hashed_password)\n\ndef create_access_token(\n    subject: str, \n    expires_delta: Optional[timedelta] = None\n) -&gt; str:\n    \"\"\"Create JWT access token.\"\"\"\n    if expires_delta:\n        expire = datetime.utcnow() + expires_delta\n    else:\n        expire = datetime.utcnow() + timedelta(minutes=15)\n\n    to_encode = {\n        \"exp\": expire,\n        \"sub\": str(subject),\n        \"type\": \"access\"\n    }\n\n    encoded_jwt = jwt.encode(\n        to_encode, \n        settings.SECRET_KEY, \n        algorithm=settings.ALGORITHM\n    )\n    return encoded_jwt\n\ndef generate_secure_token(length: int = 32) -&gt; str:\n    \"\"\"Generate cryptographically secure random token.\"\"\"\n    return secrets.token_urlsafe(length)\n</code></pre>"},{"location":"development-standards/languages/python/#performance-optimization","title":"Performance Optimization","text":""},{"location":"development-standards/languages/python/#async-best-practices","title":"Async Best Practices","text":"<pre><code># app/services/telemetry_service.py\nimport asyncio\nfrom typing import List\nimport aioredis\nfrom motor.motor_asyncio import AsyncIOMotorClient\n\nclass TelemetryService:\n    def __init__(self):\n        self.redis = None\n        self.mongodb = None\n\n    async def connect(self):\n        \"\"\"Initialize async connections.\"\"\"\n        self.redis = await aioredis.create_redis_pool('redis://localhost')\n        self.mongodb = AsyncIOMotorClient('mongodb://localhost:27017')\n\n    async def process_telemetry_batch(\n        self, \n        messages: List[Dict[str, Any]]\n    ) -&gt; None:\n        \"\"\"Process telemetry messages in parallel.\"\"\"\n        tasks = []\n\n        for message in messages:\n            task = self._process_single_message(message)\n            tasks.append(task)\n\n        # Process all messages concurrently\n        results = await asyncio.gather(*tasks, return_exceptions=True)\n\n        # Handle any exceptions\n        for i, result in enumerate(results):\n            if isinstance(result, Exception):\n                logger.error(f\"Failed to process message {i}: {result}\")\n\n    async def _process_single_message(\n        self, \n        message: Dict[str, Any]\n    ) -&gt; None:\n        \"\"\"Process single telemetry message.\"\"\"\n        # Validate message\n        device_id = message.get('device_id')\n        data = message.get('data')\n\n        # Store in Redis for real-time access\n        await self.redis.setex(\n            f\"telemetry:{device_id}:latest\",\n            60,  # 60 seconds TTL\n            json.dumps(data)\n        )\n\n        # Store in MongoDB for historical data\n        await self.mongodb.telemetry.insert_one({\n            'device_id': device_id,\n            'data': data,\n            'timestamp': datetime.utcnow()\n        })\n</code></pre>"},{"location":"development-standards/languages/python/#caching","title":"Caching","text":"<pre><code># app/core/cache.py\nfrom functools import wraps\nimport hashlib\nimport json\nfrom typing import Optional, Callable\nimport redis\n\nredis_client = redis.Redis(host='localhost', port=6379, decode_responses=True)\n\ndef cache_result(expire: int = 300):\n    \"\"\"Cache function results in Redis.\"\"\"\n    def decorator(func: Callable):\n        @wraps(func)\n        async def wrapper(*args, **kwargs):\n            # Create cache key from function name and arguments\n            cache_key = f\"{func.__name__}:{hashlib.md5(str(args).encode()).hexdigest()}\"\n\n            # Try to get from cache\n            cached = redis_client.get(cache_key)\n            if cached:\n                return json.loads(cached)\n\n            # Call function and cache result\n            result = await func(*args, **kwargs)\n            redis_client.setex(cache_key, expire, json.dumps(result))\n\n            return result\n        return wrapper\n    return decorator\n\n# Usage example\n@cache_result(expire=600)  # Cache for 10 minutes\nasync def get_device_statistics(device_id: str) -&gt; Dict[str, Any]:\n    \"\"\"Get device statistics (expensive operation).\"\"\"\n    # Complex calculation here\n    return statistics\n</code></pre>"},{"location":"development-standards/languages/python/#logging-and-monitoring","title":"Logging and Monitoring","text":""},{"location":"development-standards/languages/python/#structured-logging","title":"Structured Logging","text":"<pre><code># app/core/logging.py\nimport logging\nimport json\nfrom pythonjsonlogger import jsonlogger\n\n# Configure JSON logging\nlogHandler = logging.StreamHandler()\nformatter = jsonlogger.JsonFormatter()\nlogHandler.setFormatter(formatter)\n\nlogger = logging.getLogger()\nlogger.addHandler(logHandler)\nlogger.setLevel(logging.INFO)\n\n# Usage\nlogger.info(\n    \"Device connected\",\n    extra={\n        \"device_id\": device_id,\n        \"organization_id\": org_id,\n        \"ip_address\": ip_address,\n        \"event_type\": \"device.connected\"\n    }\n)\n</code></pre>"},{"location":"development-standards/languages/python/#documentation","title":"Documentation","text":""},{"location":"development-standards/languages/python/#docstring-standards","title":"Docstring Standards","text":"<pre><code>def calculate_device_health_score(\n    device_id: str,\n    telemetry_data: List[Dict[str, float]],\n    time_window: timedelta = timedelta(hours=24)\n) -&gt; float:\n    \"\"\"\n    Calculate health score for a device based on telemetry data.\n\n    The health score is calculated using a weighted average of various\n    metrics including uptime, error rate, and sensor readings.\n\n    Args:\n        device_id: Unique identifier of the device\n        telemetry_data: List of telemetry readings with timestamps\n        time_window: Time period to consider for calculation\n\n    Returns:\n        float: Health score between 0.0 (unhealthy) and 1.0 (healthy)\n\n    Raises:\n        ValueError: If device_id is invalid or telemetry_data is empty\n        DeviceNotFoundException: If device doesn't exist\n\n    Example:\n        &gt;&gt;&gt; score = calculate_device_health_score(\n        ...     \"dev_123\",\n        ...     telemetry_data,\n        ...     timedelta(hours=12)\n        ... )\n        &gt;&gt;&gt; print(f\"Health score: {score:.2%}\")\n        Health score: 95.50%\n    \"\"\"\n    pass\n</code></pre>"},{"location":"development-standards/languages/python/#code-review-checklist","title":"Code Review Checklist","text":"<ul> <li> Code follows PEP 8 style guide</li> <li> All functions have type hints</li> <li> Complex logic has comments</li> <li> No hardcoded secrets or credentials</li> <li> Input validation is comprehensive</li> <li> Error handling covers edge cases</li> <li> Tests cover happy path and error cases</li> <li> Performance implications considered</li> <li> Security best practices followed</li> <li> Documentation is clear and complete</li> </ul>"},{"location":"getting-started/","title":"Getting Started","text":"<p>Welcome to TES\u2a53IoT! This section will help you get up and running quickly.</p>"},{"location":"getting-started/#in-this-section","title":"In This Section","text":"<ul> <li>Overview - Platform introduction and capabilities</li> <li>Quick Start - Deploy your first device in 5 minutes</li> <li>Installation - Detailed installation instructions</li> <li>First Project - Build your first IoT application</li> <li>Next Steps - Where to go from here</li> </ul>"},{"location":"getting-started/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, ensure you have:</p> <ul> <li>Docker and Docker Compose installed</li> <li>Basic understanding of IoT concepts</li> <li>Access to a Linux/macOS/Windows system</li> </ul>"},{"location":"getting-started/#choose-your-path","title":"Choose Your Path","text":"<ul> <li> <p> I want to try it quickly</p> <p>\u2192 Go to Quick Start</p> </li> <li> <p> I want to deploy production</p> <p>\u2192 Go to Installation</p> </li> <li> <p> I want to learn the concepts</p> <p>\u2192 Go to Overview</p> </li> </ul>"},{"location":"getting-started/overview/","title":"Platform Overview","text":""},{"location":"getting-started/overview/#what-is-tesiot","title":"What is TES\u2a53IoT?","text":"<p>TES\u2a53IoT is an enterprise-grade AIoT (Artificial Intelligence of Things) platform designed for organizations that need:</p> <ul> <li>Secure device connectivity at scale</li> <li>AI-powered insights from IoT data</li> <li>Extensible architecture for custom solutions</li> <li>Enterprise compliance (NIST CSF 2.0, ISO 27001)</li> </ul>"},{"location":"getting-started/overview/#core-features","title":"Core Features","text":""},{"location":"getting-started/overview/#zero-trust-security","title":"\ud83d\udd12 Zero Trust Security","text":"<ul> <li>Certificate-based authentication for every device</li> <li>Vault PKI integration</li> <li>No hardcoded credentials</li> <li>Real-time certificate validation</li> </ul>"},{"location":"getting-started/overview/#ai-integration","title":"\ud83e\udd16 AI Integration","text":"<ul> <li>Natural language queries with Flowise</li> <li>Pre-built AI templates for common use cases</li> <li>Custom model integration support</li> <li>Real-time anomaly detection</li> </ul>"},{"location":"getting-started/overview/#scalable-architecture","title":"\ud83d\udcca Scalable Architecture","text":"<ul> <li>Support for 1M+ concurrent devices</li> <li>Multi-region deployment capability</li> <li>Horizontal auto-scaling</li> <li>&lt;5ms API response times</li> </ul>"},{"location":"getting-started/overview/#extension-marketplace","title":"\ud83d\udd0c Extension Marketplace","text":"<ul> <li>Plugin architecture for custom functionality</li> <li>Revenue sharing for developers</li> <li>Industry-specific solutions</li> <li>Easy deployment and management</li> </ul>"},{"location":"getting-started/overview/#use-cases","title":"Use Cases","text":"<p>TES\u2a53IoT excels in:</p> <ul> <li>Manufacturing - Predictive maintenance, quality control</li> <li>Healthcare - Patient monitoring, asset tracking</li> <li>Smart Cities - Infrastructure monitoring, energy management</li> <li>Agriculture - Precision farming, environmental monitoring</li> </ul>"},{"location":"getting-started/overview/#next-steps","title":"Next Steps","text":"<p>Ready to get started? Choose your path:</p> <ul> <li>Quick Start - Try it in 5 minutes</li> <li>Installation - Set up production environment</li> <li>Architecture - Deep dive into design</li> </ul>"},{"location":"getting-started/quick-start/","title":"Quick Start Guide","text":"<p>Get up and running with TES\u2a53IoT Platform in 5 minutes!</p>"},{"location":"getting-started/quick-start/#prerequisites","title":"Prerequisites","text":"<ul> <li>Docker &amp; Docker Compose installed</li> <li>8GB RAM minimum</li> <li>Linux/macOS/Windows with WSL2</li> </ul>"},{"location":"getting-started/quick-start/#1-clone-the-repository","title":"1. Clone the Repository","text":"<pre><code>git clone https://github.com/tesaiot/tesa-iot-platform.git\ncd tesa-iot-platform\n</code></pre>"},{"location":"getting-started/quick-start/#2-deploy-the-platform","title":"2. Deploy the Platform","text":"<pre><code># Quick deployment with all services\n./scripts/deploy-production.sh\n\n# Or use make for common operations\nmake deploy\n</code></pre>"},{"location":"getting-started/quick-start/#3-access-the-platform","title":"3. Access the Platform","text":"<p>Open your browser and navigate to:</p> <ul> <li>Admin UI: http://localhost:5566</li> <li>Default Credentials: </li> <li>Email: <code>admin@tesa.local</code></li> <li>Password: <code>admin123</code></li> </ul>"},{"location":"getting-started/quick-start/#4-add-your-first-device","title":"4. Add Your First Device","text":"<ol> <li>Navigate to Device Management</li> <li>Click Add Device</li> <li>Fill in device details:    <pre><code>Device Name: My First Device\nDevice Type: sensor\nManufacturer: MyCompany\nModel: Temperature-001\n</code></pre></li> <li>Click Generate Certificate to create device credentials</li> <li>Download the certificate bundle</li> </ol>"},{"location":"getting-started/quick-start/#5-connect-your-device","title":"5. Connect Your Device","text":""},{"location":"getting-started/quick-start/#using-mqtt-with-python","title":"Using MQTT with Python","text":"<pre><code>import paho.mqtt.client as mqtt\nimport json\nimport time\nimport ssl\n\n# Device configuration\nDEVICE_ID = \"your-device-id\"\nBROKER = \"localhost\"\nPORT = 8883  # Secure MQTT port\n\n# Certificate paths (from downloaded bundle)\nCA_CERT = \"ca.crt\"\nCLIENT_CERT = \"device.crt\"\nCLIENT_KEY = \"device.key\"\n\n# MQTT callbacks\ndef on_connect(client, userdata, flags, rc):\n    if rc == 0:\n        print(\"Connected successfully!\")\n        # Subscribe to commands\n        client.subscribe(f\"devices/{DEVICE_ID}/commands\")\n    else:\n        print(f\"Connection failed with code {rc}\")\n\ndef on_message(client, userdata, msg):\n    print(f\"Received command: {msg.payload.decode()}\")\n\n# Setup MQTT client\nclient = mqtt.Client(client_id=DEVICE_ID)\nclient.on_connect = on_connect\nclient.on_message = on_message\n\n# Configure TLS\nclient.tls_set(\n    ca_certs=CA_CERT,\n    certfile=CLIENT_CERT,\n    keyfile=CLIENT_KEY,\n    cert_reqs=ssl.CERT_REQUIRED,\n    tls_version=ssl.PROTOCOL_TLSv1_2\n)\n\n# Connect to broker\nclient.connect(BROKER, PORT, 60)\nclient.loop_start()\n\n# Send telemetry data\ntopic = f\"devices/{DEVICE_ID}/telemetry\"\nwhile True:\n    telemetry = {\n        \"temperature\": 22.5 + (time.time() % 10) / 10,\n        \"humidity\": 45 + (time.time() % 20) / 2,\n        \"timestamp\": int(time.time() * 1000)\n    }\n\n    client.publish(topic, json.dumps(telemetry))\n    print(f\"Sent: {telemetry}\")\n    time.sleep(10)\n</code></pre>"},{"location":"getting-started/quick-start/#using-mqtt-with-nodejs","title":"Using MQTT with Node.js","text":"<pre><code>const mqtt = require('mqtt');\nconst fs = require('fs');\n\n// Device configuration\nconst DEVICE_ID = 'your-device-id';\nconst BROKER_URL = 'mqtts://localhost:8883';\n\n// Certificate options\nconst options = {\n    clientId: DEVICE_ID,\n    ca: fs.readFileSync('ca.crt'),\n    cert: fs.readFileSync('device.crt'),\n    key: fs.readFileSync('device.key'),\n    rejectUnauthorized: true\n};\n\n// Connect to broker\nconst client = mqtt.connect(BROKER_URL, options);\n\nclient.on('connect', () =&gt; {\n    console.log('Connected successfully!');\n\n    // Subscribe to commands\n    client.subscribe(`devices/${DEVICE_ID}/commands`);\n\n    // Send telemetry every 10 seconds\n    setInterval(() =&gt; {\n        const telemetry = {\n            temperature: 22.5 + (Date.now() % 10000) / 1000,\n            humidity: 45 + (Date.now() % 20000) / 1000,\n            timestamp: Date.now()\n        };\n\n        client.publish(\n            `devices/${DEVICE_ID}/telemetry`,\n            JSON.stringify(telemetry)\n        );\n\n        console.log('Sent:', telemetry);\n    }, 10000);\n});\n\nclient.on('message', (topic, message) =&gt; {\n    console.log('Received command:', message.toString());\n});\n\nclient.on('error', (err) =&gt; {\n    console.error('Connection error:', err);\n});\n</code></pre>"},{"location":"getting-started/quick-start/#6-view-device-data","title":"6. View Device Data","text":"<ol> <li>Go back to the Admin UI</li> <li>Navigate to Device Management</li> <li>Click on your device</li> <li>Go to the Telemetry tab</li> <li>You should see real-time data flowing in!</li> </ol>"},{"location":"getting-started/quick-start/#7-explore-ai-features","title":"7. Explore AI Features","text":"<ol> <li>Click the three-dot menu on your device</li> <li>Select \"Open in Flowise AI\"</li> <li>Ask questions about your device data:</li> <li>\"What's the average temperature?\"</li> <li>\"Show me temperature trends\"</li> <li>\"Alert me if humidity exceeds 70%\"</li> </ol>"},{"location":"getting-started/quick-start/#common-issues","title":"Common Issues","text":""},{"location":"getting-started/quick-start/#port-5566-already-in-use","title":"Port 5566 Already in Use","text":"<pre><code># Check what's using the port\nsudo lsof -i :5566\n\n# Stop the platform\nmake stop\n\n# Restart\nmake deploy\n</code></pre>"},{"location":"getting-started/quick-start/#certificate-connection-failed","title":"Certificate Connection Failed","text":"<ul> <li>Ensure you're using port 8883 (not 1883)</li> <li>Verify certificate paths are correct</li> <li>Check that device ID matches the certificate CN</li> </ul>"},{"location":"getting-started/quick-start/#no-data-showing","title":"No Data Showing","text":"<ul> <li>Check device is connected: <code>docker logs tesa-vernemq</code></li> <li>Verify telemetry topic format: <code>devices/{device_id}/telemetry</code></li> <li>Ensure JSON payload is valid</li> </ul>"},{"location":"getting-started/quick-start/#next-steps","title":"Next Steps","text":"<ul> <li>Installation Guide - Production deployment</li> <li>Architecture Overview - Understand the system</li> <li>API Reference - Integrate with REST APIs</li> <li>Tutorials - Learn advanced features</li> </ul>"},{"location":"getting-started/quick-start/#need-help","title":"Need Help?","text":"<ul> <li>\ud83d\udcd6 Full Documentation</li> <li>\ud83d\udcac Community Forum</li> <li>\ud83d\udc1b Report Issues</li> </ul>"},{"location":"platform-docs/platform-overview/","title":"TES\u2a53IoT Platform Overview","text":""},{"location":"platform-docs/platform-overview/#executive-summary","title":"Executive Summary","text":"<p>TES\u2a53IoT is an enterprise-grade AIoT (Artificial Intelligence of Things) platform that combines Zero Trust security with AI-powered insights. Built for organizations that need to manage thousands to millions of IoT devices while maintaining the highest security standards.</p>"},{"location":"platform-docs/platform-overview/#key-features","title":"Key Features","text":""},{"location":"platform-docs/platform-overview/#zero-trust-security-architecture","title":"\ud83d\udd12 Zero Trust Security Architecture","text":"<ul> <li>Certificate-based authentication for every device</li> <li>HashiCorp Vault PKI integration</li> <li>No hardcoded credentials anywhere in the system</li> <li>End-to-end encryption with TLS 1.3</li> <li>Real-time certificate validation and revocation</li> </ul>"},{"location":"platform-docs/platform-overview/#ai-powered-intelligence","title":"\ud83e\udd16 AI-Powered Intelligence","text":"<ul> <li>Natural language queries via Flowise integration</li> <li>Predictive maintenance algorithms</li> <li>Anomaly detection in real-time</li> <li>Custom AI model integration support</li> <li>Automated insights generation</li> </ul>"},{"location":"platform-docs/platform-overview/#scalable-performance","title":"\ud83d\udcca Scalable Performance","text":"<ul> <li>1M+ concurrent devices support</li> <li>&lt;5ms API response time (p99)</li> <li>Multi-region deployment capability</li> <li>Horizontal auto-scaling</li> <li>99.99% uptime SLA</li> </ul>"},{"location":"platform-docs/platform-overview/#extensible-architecture","title":"\ud83d\udd0c Extensible Architecture","text":"<ul> <li>Plugin marketplace for custom functionality</li> <li>Industry-specific solutions</li> <li>REST and GraphQL APIs</li> <li>Multiple protocol support (MQTT, HTTP, WebSocket)</li> <li>SDK availability for major languages</li> </ul>"},{"location":"platform-docs/platform-overview/#platform-components","title":"Platform Components","text":""},{"location":"platform-docs/platform-overview/#core-services","title":"Core Services","text":"<ol> <li>API Gateway (APISIX)</li> <li>Dynamic routing and load balancing</li> <li>Protocol translation</li> <li>Rate limiting and security policies</li> <li> <p>Plugin ecosystem</p> </li> <li> <p>MQTT Broker (VerneMQ)</p> </li> <li>Clustered MQTT broker</li> <li>Zero Trust authentication</li> <li>Real-time message routing</li> <li> <p>WebSocket support</p> </li> <li> <p>API Server (FastAPI)</p> </li> <li>RESTful API endpoints</li> <li>JWT authentication</li> <li>OpenAPI 3.1 documentation</li> <li> <p>Async request handling</p> </li> <li> <p>Databases</p> </li> <li>MongoDB: Device and user data</li> <li>TimescaleDB: Time-series telemetry</li> <li> <p>Redis: Caching and sessions</p> </li> <li> <p>Security (Vault)</p> </li> <li>PKI certificate authority</li> <li>Dynamic secrets management</li> <li>Encryption as a service</li> <li>Audit logging</li> </ol>"},{"location":"platform-docs/platform-overview/#ai-integration","title":"AI Integration","text":"<ol> <li>Flowise</li> <li>Visual AI flow builder</li> <li>Pre-built IoT templates</li> <li>Custom node development</li> <li> <p>LLM integration</p> </li> <li> <p>Analytics Engine</p> </li> <li>Real-time stream processing</li> <li>Batch analytics</li> <li>Machine learning pipelines</li> <li>Predictive models</li> </ol>"},{"location":"platform-docs/platform-overview/#management-tools","title":"Management Tools","text":"<ol> <li>Admin UI (React)</li> <li>Device management</li> <li>User administration</li> <li>Real-time monitoring</li> <li> <p>System configuration</p> </li> <li> <p>CLI Tools</p> </li> <li>Deployment automation</li> <li>Backup and restore</li> <li>Health checks</li> <li>Log analysis</li> </ol>"},{"location":"platform-docs/platform-overview/#use-cases","title":"Use Cases","text":""},{"location":"platform-docs/platform-overview/#manufacturing-40","title":"Manufacturing 4.0","text":"<ul> <li>Predictive maintenance on production lines</li> <li>Quality control with computer vision</li> <li>Energy optimization</li> <li>Supply chain tracking</li> </ul>"},{"location":"platform-docs/platform-overview/#smart-healthcare","title":"Smart Healthcare","text":"<ul> <li>Patient monitoring systems</li> <li>Medical equipment tracking</li> <li>Environmental monitoring</li> <li>Compliance reporting</li> </ul>"},{"location":"platform-docs/platform-overview/#smart-cities","title":"Smart Cities","text":"<ul> <li>Traffic management</li> <li>Environmental sensors</li> <li>Infrastructure monitoring</li> <li>Emergency response systems</li> </ul>"},{"location":"platform-docs/platform-overview/#agriculture-tech","title":"Agriculture Tech","text":"<ul> <li>Precision farming</li> <li>Crop monitoring</li> <li>Irrigation control</li> <li>Weather stations</li> </ul>"},{"location":"platform-docs/platform-overview/#technical-specifications","title":"Technical Specifications","text":""},{"location":"platform-docs/platform-overview/#system-requirements","title":"System Requirements","text":"<p>Minimum (Development): - 8GB RAM - 4 CPU cores - 50GB storage - Docker &amp; Docker Compose</p> <p>Recommended (Production): - 32GB RAM - 16 CPU cores - 500GB SSD storage - Kubernetes cluster</p>"},{"location":"platform-docs/platform-overview/#supported-protocols","title":"Supported Protocols","text":"<ul> <li>MQTT 3.1.1 / 5.0</li> <li>HTTP/HTTPS REST</li> <li>WebSocket</li> <li>gRPC (planned)</li> <li>CoAP (extension)</li> </ul>"},{"location":"platform-docs/platform-overview/#security-standards","title":"Security Standards","text":"<ul> <li>NIST CSF 2.0</li> <li>ISO 27001/27017/27018</li> <li>IEC 62443</li> <li>OWASP IoT Top 10</li> </ul>"},{"location":"platform-docs/platform-overview/#performance-metrics","title":"Performance Metrics","text":"<ul> <li>Device connections: 1M+ concurrent</li> <li>Message throughput: 100K msgs/sec</li> <li>API latency: &lt;5ms (p99)</li> <li>Data ingestion: 10GB/hour</li> <li>Query response: &lt;100ms</li> </ul>"},{"location":"platform-docs/platform-overview/#deployment-options","title":"Deployment Options","text":""},{"location":"platform-docs/platform-overview/#cloud-deployment","title":"Cloud Deployment","text":"<ul> <li>AWS: EKS, RDS, ElastiCache</li> <li>Azure: AKS, CosmosDB, Cache</li> <li>GCP: GKE, Cloud SQL, Memorystore</li> <li>Multi-cloud: Supported</li> </ul>"},{"location":"platform-docs/platform-overview/#on-premise","title":"On-Premise","text":"<ul> <li>Docker Swarm</li> <li>Kubernetes</li> <li>OpenShift</li> <li>Bare metal</li> </ul>"},{"location":"platform-docs/platform-overview/#hybrid","title":"Hybrid","text":"<ul> <li>Edge computing nodes</li> <li>Cloud control plane</li> <li>Local data processing</li> <li>Selective cloud sync</li> </ul>"},{"location":"platform-docs/platform-overview/#getting-started","title":"Getting Started","text":""},{"location":"platform-docs/platform-overview/#quick-start-5-minutes","title":"Quick Start (5 minutes)","text":"<pre><code>git clone https://github.com/tesaiot/tesa-iot-platform\ncd tesa-iot-platform\n./scripts/deploy-production.sh\n</code></pre> <p>Access the platform at http://localhost:5566</p>"},{"location":"platform-docs/platform-overview/#first-steps","title":"First Steps","text":"<ol> <li>Create an organization</li> <li>Add your first device</li> <li>Connect via MQTT</li> <li>View telemetry data</li> <li>Explore AI features</li> </ol>"},{"location":"platform-docs/platform-overview/#architecture-deep-dive","title":"Architecture Deep Dive","text":""},{"location":"platform-docs/platform-overview/#security-architecture","title":"Security Architecture","text":"<ul> <li>Zero Trust Model</li> <li>PKI Infrastructure</li> <li>Authentication Flow</li> </ul>"},{"location":"platform-docs/platform-overview/#data-architecture","title":"Data Architecture","text":"<ul> <li>Data Flow</li> <li>Storage Strategy</li> <li>Real-time Processing</li> </ul>"},{"location":"platform-docs/platform-overview/#scalability-architecture","title":"Scalability Architecture","text":"<ul> <li>Microservices Design</li> <li>Load Balancing</li> <li>High Availability</li> </ul>"},{"location":"platform-docs/platform-overview/#roadmap","title":"Roadmap","text":""},{"location":"platform-docs/platform-overview/#current-version-v202506-beta","title":"Current Version (v2025.06-beta)","text":"<ul> <li>\u2705 Zero Trust MQTT</li> <li>\u2705 Basic AI integration</li> <li>\u2705 Multi-tenant support</li> <li>\u2705 Core protocol support</li> </ul>"},{"location":"platform-docs/platform-overview/#next-release-v202507","title":"Next Release (v2025.07)","text":"<ul> <li> Advanced AI workflows</li> <li> Extension marketplace</li> <li> Enhanced monitoring</li> <li> GraphQL API</li> </ul>"},{"location":"platform-docs/platform-overview/#future-v202509","title":"Future (v2025.09+)","text":"<ul> <li> Edge computing</li> <li> Blockchain integration</li> <li> Quantum-safe crypto</li> <li> Global CDN</li> </ul>"},{"location":"platform-docs/platform-overview/#community-support","title":"Community &amp; Support","text":""},{"location":"platform-docs/platform-overview/#resources","title":"Resources","text":"<ul> <li>Developer Forum</li> <li>GitHub Repository</li> <li>API Documentation</li> <li>Video Tutorials</li> </ul>"},{"location":"platform-docs/platform-overview/#professional-support","title":"Professional Support","text":"<ul> <li>Email: support@tesaiot.com</li> <li>Enterprise: enterprise@tesaiot.com</li> <li>Partners: partners@tesaiot.com</li> </ul>"},{"location":"platform-docs/platform-overview/#contributing","title":"Contributing","text":"<p>We welcome contributions! See our Contributing Guide.</p>"},{"location":"platform-docs/platform-overview/#license","title":"License","text":"<ul> <li>Community Edition: Apache 2.0</li> <li>Enterprise Edition: Commercial license</li> <li>Documentation: CC BY 4.0</li> </ul> <p>TES\u2a53IoT Platform - Empowering the Future of Connected Intelligence</p>"},{"location":"tutorials/beginner/your-first-api/","title":"Building Your First IoT API","text":"<p>In this tutorial, you'll learn how to build a simple IoT API endpoint that receives sensor data and stores it in the database.</p>"},{"location":"tutorials/beginner/your-first-api/#prerequisites","title":"Prerequisites","text":"<ul> <li>TES\u2a53IoT Platform running locally</li> <li>Basic knowledge of Python and REST APIs</li> <li>Postman or curl for testing</li> </ul>"},{"location":"tutorials/beginner/your-first-api/#what-well-build","title":"What We'll Build","text":"<p>A simple temperature monitoring API that: - Receives temperature readings from sensors - Validates the data - Stores it in the database - Returns confirmation</p>"},{"location":"tutorials/beginner/your-first-api/#step-1-understanding-the-architecture","title":"Step 1: Understanding the Architecture","text":"<p>Before we code, let's understand how APIs work in TES\u2a53IoT:</p> <pre><code>graph LR\n    A[IoT Device] --&gt;|HTTP POST| B[API Gateway]\n    B --&gt; C[API Server]\n    C --&gt; D[Validation]\n    D --&gt; E[Business Logic]\n    E --&gt; F[Database]\n    F --&gt;|Response| A</code></pre>"},{"location":"tutorials/beginner/your-first-api/#step-2-create-the-data-model","title":"Step 2: Create the Data Model","text":"<p>First, let's define what temperature data looks like:</p> <pre><code># app/models/temperature.py\nfrom pydantic import BaseModel, Field, validator\nfrom datetime import datetime\nfrom typing import Optional\n\nclass TemperatureReading(BaseModel):\n    \"\"\"Model for temperature sensor readings.\"\"\"\n\n    device_id: str = Field(..., description=\"Unique device identifier\")\n    temperature: float = Field(..., ge=-50, le=100, description=\"Temperature in Celsius\")\n    humidity: Optional[float] = Field(None, ge=0, le=100, description=\"Humidity percentage\")\n    timestamp: Optional[datetime] = Field(None, description=\"Reading timestamp\")\n\n    @validator('temperature')\n    def validate_temperature(cls, v):\n        \"\"\"Ensure temperature is realistic.\"\"\"\n        if v &lt; -50 or v &gt; 100:\n            raise ValueError('Temperature must be between -50\u00b0C and 100\u00b0C')\n        return round(v, 2)  # Round to 2 decimal places\n\n    @validator('timestamp', pre=True, always=True)\n    def set_timestamp(cls, v):\n        \"\"\"Set current timestamp if not provided.\"\"\"\n        return v or datetime.utcnow()\n\n    class Config:\n        schema_extra = {\n            \"example\": {\n                \"device_id\": \"temp_sensor_001\",\n                \"temperature\": 22.5,\n                \"humidity\": 45.2,\n                \"timestamp\": \"2025-06-15T10:30:00Z\"\n            }\n        }\n</code></pre>"},{"location":"tutorials/beginner/your-first-api/#step-3-create-the-service-layer","title":"Step 3: Create the Service Layer","text":"<p>The service layer handles business logic:</p> <pre><code># app/services/temperature_service.py\nfrom typing import List, Optional\nfrom datetime import datetime, timedelta\nfrom sqlalchemy.orm import Session\n\nfrom app.models.temperature import TemperatureReading\nfrom app.repositories.temperature_repository import TemperatureRepository\nfrom app.core.exceptions import ValidationException\n\nclass TemperatureService:\n    \"\"\"Service for handling temperature data.\"\"\"\n\n    def __init__(self, db: Session):\n        self.db = db\n        self.repository = TemperatureRepository(db)\n\n    async def record_temperature(\n        self, \n        reading: TemperatureReading,\n        user_id: str\n    ) -&gt; dict:\n        \"\"\"\n        Record a new temperature reading.\n\n        Args:\n            reading: Temperature data from sensor\n            user_id: ID of user recording the data\n\n        Returns:\n            dict: Confirmation with reading ID\n        \"\"\"\n        # Check if device belongs to user\n        if not self._verify_device_ownership(reading.device_id, user_id):\n            raise ValidationException(\n                field=\"device_id\",\n                reason=\"Device not found or access denied\"\n            )\n\n        # Check for duplicate readings (anti-replay)\n        if self._is_duplicate_reading(reading):\n            raise ValidationException(\n                field=\"timestamp\",\n                reason=\"Duplicate reading detected\"\n            )\n\n        # Check if temperature changed drastically (anomaly detection)\n        if self._is_anomalous_reading(reading):\n            # Log potential sensor malfunction\n            logger.warning(\n                f\"Anomalous reading from device {reading.device_id}: {reading.temperature}\u00b0C\"\n            )\n\n        # Store in database\n        stored_reading = self.repository.create(reading.dict())\n\n        # Update device last_seen timestamp\n        self._update_device_status(reading.device_id)\n\n        return {\n            \"success\": True,\n            \"reading_id\": str(stored_reading.id),\n            \"message\": \"Temperature recorded successfully\"\n        }\n\n    def _verify_device_ownership(self, device_id: str, user_id: str) -&gt; bool:\n        \"\"\"Verify that device belongs to user's organization.\"\"\"\n        # Implementation here\n        return True\n\n    def _is_duplicate_reading(self, reading: TemperatureReading) -&gt; bool:\n        \"\"\"Check if this exact reading was already submitted.\"\"\"\n        recent_readings = self.repository.get_recent_readings(\n            device_id=reading.device_id,\n            minutes=5\n        )\n\n        for recent in recent_readings:\n            if (recent.temperature == reading.temperature and \n                abs((recent.timestamp - reading.timestamp).total_seconds()) &lt; 60):\n                return True\n\n        return False\n\n    def _is_anomalous_reading(self, reading: TemperatureReading) -&gt; bool:\n        \"\"\"Detect anomalous temperature changes.\"\"\"\n        last_reading = self.repository.get_last_reading(reading.device_id)\n\n        if not last_reading:\n            return False\n\n        # If temperature changed more than 10\u00b0C in 1 minute\n        time_diff = (reading.timestamp - last_reading.timestamp).total_seconds()\n        temp_diff = abs(reading.temperature - last_reading.temperature)\n\n        if time_diff &lt; 60 and temp_diff &gt; 10:\n            return True\n\n        return False\n</code></pre>"},{"location":"tutorials/beginner/your-first-api/#step-4-create-the-api-endpoint","title":"Step 4: Create the API Endpoint","text":"<p>Now let's create the FastAPI endpoint:</p> <pre><code># app/api/v1/endpoints/temperature.py\nfrom fastapi import APIRouter, Depends, HTTPException, status\nfrom typing import List\nfrom sqlalchemy.orm import Session\n\nfrom app.models.temperature import TemperatureReading\nfrom app.services.temperature_service import TemperatureService\nfrom app.core.deps import get_current_user, get_db\nfrom app.core.responses import SuccessResponse, ErrorResponse\n\nrouter = APIRouter()\n\n@router.post(\n    \"/temperature\",\n    response_model=SuccessResponse,\n    status_code=status.HTTP_201_CREATED,\n    summary=\"Record temperature reading\",\n    description=\"Submit a new temperature reading from an IoT device\"\n)\nasync def record_temperature(\n    reading: TemperatureReading,\n    current_user = Depends(get_current_user),\n    db: Session = Depends(get_db)\n):\n    \"\"\"\n    Record a new temperature reading.\n\n    - **device_id**: Unique identifier of the temperature sensor\n    - **temperature**: Temperature value in Celsius (-50 to 100)\n    - **humidity**: Optional humidity percentage (0 to 100)\n    - **timestamp**: Optional ISO 8601 timestamp (defaults to current time)\n    \"\"\"\n    try:\n        service = TemperatureService(db)\n        result = await service.record_temperature(reading, current_user.id)\n\n        return SuccessResponse(\n            data=result,\n            message=\"Temperature recorded successfully\"\n        )\n\n    except ValidationException as e:\n        raise HTTPException(\n            status_code=status.HTTP_400_BAD_REQUEST,\n            detail={\n                \"error\": \"VALIDATION_ERROR\",\n                \"field\": e.field,\n                \"reason\": e.reason\n            }\n        )\n    except Exception as e:\n        logger.exception(\"Error recording temperature\")\n        raise HTTPException(\n            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n            detail=\"Internal server error\"\n        )\n\n@router.get(\n    \"/temperature/{device_id}/latest\",\n    response_model=TemperatureReading,\n    summary=\"Get latest temperature\",\n    description=\"Retrieve the most recent temperature reading for a device\"\n)\nasync def get_latest_temperature(\n    device_id: str,\n    current_user = Depends(get_current_user),\n    db: Session = Depends(get_db)\n):\n    \"\"\"Get the latest temperature reading for a specific device.\"\"\"\n    service = TemperatureService(db)\n\n    # Verify device access\n    if not service._verify_device_ownership(device_id, current_user.id):\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=\"Device not found\"\n        )\n\n    reading = service.repository.get_last_reading(device_id)\n    if not reading:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=\"No readings found for this device\"\n        )\n\n    return reading\n\n@router.get(\n    \"/temperature/{device_id}/history\",\n    response_model=List[TemperatureReading],\n    summary=\"Get temperature history\",\n    description=\"Retrieve historical temperature readings for a device\"\n)\nasync def get_temperature_history(\n    device_id: str,\n    hours: int = 24,\n    current_user = Depends(get_current_user),\n    db: Session = Depends(get_db)\n):\n    \"\"\"\n    Get temperature history for a device.\n\n    - **device_id**: Device to query\n    - **hours**: Number of hours of history (default: 24, max: 168)\n    \"\"\"\n    if hours &gt; 168:  # Max 1 week\n        hours = 168\n\n    service = TemperatureService(db)\n\n    # Verify device access\n    if not service._verify_device_ownership(device_id, current_user.id):\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=\"Device not found\"\n        )\n\n    readings = service.repository.get_readings_since(\n        device_id=device_id,\n        since=datetime.utcnow() - timedelta(hours=hours)\n    )\n\n    return readings\n</code></pre>"},{"location":"tutorials/beginner/your-first-api/#step-5-add-the-route-to-main-app","title":"Step 5: Add the Route to Main App","text":"<p>Register your new router in the main application:</p> <pre><code># app/api/v1/api.py\nfrom fastapi import APIRouter\nfrom app.api.v1.endpoints import temperature\n\napi_router = APIRouter()\n\napi_router.include_router(\n    temperature.router,\n    prefix=\"/devices\",\n    tags=[\"temperature\"]\n)\n</code></pre>"},{"location":"tutorials/beginner/your-first-api/#step-6-test-your-api","title":"Step 6: Test Your API","text":""},{"location":"tutorials/beginner/your-first-api/#using-curl","title":"Using curl","text":"<pre><code># Get authentication token\nTOKEN=$(curl -X POST http://localhost:5566/api/v1/auth/login \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"email\":\"admin@tesa.local\",\"password\":\"admin123\"}' \\\n  | jq -r '.access_token')\n\n# Submit temperature reading\ncurl -X POST http://localhost:5566/api/v1/devices/temperature \\\n  -H \"Authorization: Bearer $TOKEN\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"device_id\": \"temp_sensor_001\",\n    \"temperature\": 23.5,\n    \"humidity\": 45.2\n  }'\n\n# Get latest reading\ncurl -X GET http://localhost:5566/api/v1/devices/temperature/temp_sensor_001/latest \\\n  -H \"Authorization: Bearer $TOKEN\"\n\n# Get history\ncurl -X GET http://localhost:5566/api/v1/devices/temperature/temp_sensor_001/history?hours=24 \\\n  -H \"Authorization: Bearer $TOKEN\"\n</code></pre>"},{"location":"tutorials/beginner/your-first-api/#using-python","title":"Using Python","text":"<pre><code>import requests\nimport json\n\n# Configuration\nBASE_URL = \"http://localhost:5566/api/v1\"\nEMAIL = \"admin@tesa.local\"\nPASSWORD = \"admin123\"\n\n# Login\nlogin_response = requests.post(\n    f\"{BASE_URL}/auth/login\",\n    json={\"email\": EMAIL, \"password\": PASSWORD}\n)\ntoken = login_response.json()[\"access_token\"]\n\n# Headers with auth\nheaders = {\n    \"Authorization\": f\"Bearer {token}\",\n    \"Content-Type\": \"application/json\"\n}\n\n# Submit reading\nreading = {\n    \"device_id\": \"temp_sensor_001\",\n    \"temperature\": 23.5,\n    \"humidity\": 45.2\n}\n\nresponse = requests.post(\n    f\"{BASE_URL}/devices/temperature\",\n    headers=headers,\n    json=reading\n)\n\nprint(f\"Response: {response.json()}\")\n\n# Get history\nhistory = requests.get(\n    f\"{BASE_URL}/devices/temperature/temp_sensor_001/history\",\n    headers=headers,\n    params={\"hours\": 24}\n)\n\nprint(f\"History: {json.dumps(history.json(), indent=2)}\")\n</code></pre>"},{"location":"tutorials/beginner/your-first-api/#step-7-add-input-validation","title":"Step 7: Add Input Validation","text":"<p>Let's add more sophisticated validation:</p> <pre><code># app/api/v1/endpoints/temperature.py\n\nfrom app.core.rate_limit import rate_limit\n\n@router.post(\n    \"/temperature/batch\",\n    response_model=SuccessResponse,\n    status_code=status.HTTP_201_CREATED,\n    dependencies=[Depends(rate_limit(calls=10, period=60))]  # 10 calls per minute\n)\nasync def record_temperature_batch(\n    readings: List[TemperatureReading],\n    current_user = Depends(get_current_user),\n    db: Session = Depends(get_db)\n):\n    \"\"\"\n    Submit multiple temperature readings at once.\n\n    Maximum 100 readings per request.\n    \"\"\"\n    if len(readings) &gt; 100:\n        raise HTTPException(\n            status_code=status.HTTP_400_BAD_REQUEST,\n            detail=\"Maximum 100 readings per batch\"\n        )\n\n    # Validate all readings are from same organization\n    device_ids = {r.device_id for r in readings}\n\n    service = TemperatureService(db)\n    for device_id in device_ids:\n        if not service._verify_device_ownership(device_id, current_user.id):\n            raise HTTPException(\n                status_code=status.HTTP_403_FORBIDDEN,\n                detail=f\"Access denied for device {device_id}\"\n            )\n\n    # Process readings\n    results = []\n    errors = []\n\n    for reading in readings:\n        try:\n            result = await service.record_temperature(reading, current_user.id)\n            results.append(result)\n        except Exception as e:\n            errors.append({\n                \"device_id\": reading.device_id,\n                \"timestamp\": reading.timestamp.isoformat(),\n                \"error\": str(e)\n            })\n\n    return SuccessResponse(\n        data={\n            \"processed\": len(results),\n            \"failed\": len(errors),\n            \"errors\": errors if errors else None\n        }\n    )\n</code></pre>"},{"location":"tutorials/beginner/your-first-api/#step-8-add-monitoring","title":"Step 8: Add Monitoring","text":"<p>Add logging and metrics:</p> <pre><code># app/api/v1/endpoints/temperature.py\nfrom app.core.metrics import metrics_collector\n\n@router.post(\"/temperature\")\nasync def record_temperature(\n    reading: TemperatureReading,\n    current_user = Depends(get_current_user),\n    db: Session = Depends(get_db)\n):\n    # Track API call\n    metrics_collector.increment(\n        \"api.temperature.submissions\",\n        tags={\"device_type\": \"temperature_sensor\"}\n    )\n\n    start_time = time.time()\n\n    try:\n        # ... existing code ...\n\n        # Track success\n        metrics_collector.increment(\"api.temperature.success\")\n\n        # Track temperature values for monitoring\n        metrics_collector.gauge(\n            \"iot.temperature.value\",\n            reading.temperature,\n            tags={\"device_id\": reading.device_id}\n        )\n\n        return response\n\n    except Exception as e:\n        # Track errors\n        metrics_collector.increment(\n            \"api.temperature.errors\",\n            tags={\"error_type\": type(e).__name__}\n        )\n        raise\n\n    finally:\n        # Track response time\n        duration = time.time() - start_time\n        metrics_collector.histogram(\n            \"api.temperature.response_time\",\n            duration\n        )\n</code></pre>"},{"location":"tutorials/beginner/your-first-api/#best-practices-learned","title":"Best Practices Learned","text":"<ol> <li>Always Validate Input: Use Pydantic models for automatic validation</li> <li>Handle Errors Gracefully: Return meaningful error messages</li> <li>Use Dependency Injection: For database sessions and authentication</li> <li>Implement Rate Limiting: Protect your API from abuse</li> <li>Log Everything: But don't log sensitive data</li> <li>Test Your API: Write unit and integration tests</li> <li>Document Your Endpoints: Use FastAPI's automatic documentation</li> </ol>"},{"location":"tutorials/beginner/your-first-api/#next-steps","title":"Next Steps","text":"<ul> <li>Add WebSocket support for real-time updates</li> <li>Implement caching for better performance</li> <li>Add data visualization for temperature trends</li> <li>Create alerts for temperature thresholds</li> </ul>"},{"location":"tutorials/beginner/your-first-api/#complete-code","title":"Complete Code","text":"<p>The complete code for this tutorial is available in the examples repository.</p>"},{"location":"tutorials/beginner/your-first-api/#troubleshooting","title":"Troubleshooting","text":""},{"location":"tutorials/beginner/your-first-api/#common-issues","title":"Common Issues","text":"<ol> <li>401 Unauthorized: Check your authentication token</li> <li>422 Validation Error: Verify your JSON payload format</li> <li>500 Internal Error: Check server logs for details</li> <li>Rate Limit Exceeded: Wait before making more requests</li> </ol>"},{"location":"tutorials/beginner/your-first-api/#getting-help","title":"Getting Help","text":"<ul> <li>Check the API Reference</li> <li>Visit our Community Forum</li> <li>Report bugs on GitHub</li> </ul>"}]}